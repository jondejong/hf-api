/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package hf.api

import hf.api.app.AppFactory
import hf.api.filter.ErrorHandlerFilter
import hf.api.properties.HFApiProperties
import hf.api.properties.ServerProperties
import org.http4k.core.*
import org.http4k.filter.AllowAll
import org.http4k.filter.CorsPolicy
import org.http4k.filter.OriginPolicy
import org.http4k.filter.ServerFilters
import org.http4k.routing.bind
import org.http4k.routing.path
import org.http4k.routing.routes
import org.http4k.server.Undertow
import org.http4k.server.asServer

class App(appFactory: AppFactory) {
    private val port = appFactory.port

    private val handlers = routes(
        "/hello" bind routes(
            "/{name:.*}" bind Method.GET to { request: Request -> Response(Status.OK).body("Hello, ${request.path("name")}!") }
        ),
        "deck" bind appFactory.deckRoutes.routes
    )

    private val app =
        ServerFilters.InitialiseRequestContext(appFactory.contexts)
            .then(
                ServerFilters.Cors(
                    CorsPolicy(
                        originPolicy = OriginPolicy.AllowAll(),
                        headers = listOf("content-type", AppFactory.AUTHENTICATION_HEADER),
                        methods = Method.values().toList(),
                        credentials = true
                    )
                )
            )
            .then(ErrorHandlerFilter.errorFilter)
            .then(handlers)

    private val server = app.asServer(Undertow(port))

    fun start() {
        server.start()
    }

    fun stop() {
        server.stop()
    }

}

fun main() {

    val app = App(
        appFactory = AppFactory(
            HFApiProperties(
                serverProperties = ServerProperties(
                    port = 9000
                )
            )
        )
    )

    app.start()

}
